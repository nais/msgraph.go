// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/nais/msgraph.go/jsonx"
)

// AccessReviewInstanceAcceptRecommendationsRequestParameter undocumented
type AccessReviewInstanceAcceptRecommendationsRequestParameter struct {
}

// AccessReviewInstanceApplyDecisionsRequestParameter undocumented
type AccessReviewInstanceApplyDecisionsRequestParameter struct {
}

// AccessReviewInstanceBatchRecordDecisionsRequestParameter undocumented
type AccessReviewInstanceBatchRecordDecisionsRequestParameter struct {
	// Decision undocumented
	Decision *string `json:"decision,omitempty"`
	// Justification undocumented
	Justification *string `json:"justification,omitempty"`
	// PrincipalID undocumented
	PrincipalID *string `json:"principalId,omitempty"`
	// ResourceID undocumented
	ResourceID *string `json:"resourceId,omitempty"`
}

// AccessReviewInstanceResetDecisionsRequestParameter undocumented
type AccessReviewInstanceResetDecisionsRequestParameter struct {
}

// AccessReviewInstanceSendReminderRequestParameter undocumented
type AccessReviewInstanceSendReminderRequestParameter struct {
}

// AccessReviewInstanceStopRequestParameter undocumented
type AccessReviewInstanceStopRequestParameter struct {
}

// AccessReviewScheduleDefinitionStopRequestParameter undocumented
type AccessReviewScheduleDefinitionStopRequestParameter struct {
}

// Decisions returns request builder for AccessReviewInstanceDecisionItem collection
func (b *AccessReviewInstanceRequestBuilder) Decisions() *AccessReviewInstanceDecisionsCollectionRequestBuilder {
	bb := &AccessReviewInstanceDecisionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/decisions"
	return bb
}

// AccessReviewInstanceDecisionsCollectionRequestBuilder is request builder for AccessReviewInstanceDecisionItem collection
type AccessReviewInstanceDecisionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewInstanceDecisionItem collection
func (b *AccessReviewInstanceDecisionsCollectionRequestBuilder) Request() *AccessReviewInstanceDecisionsCollectionRequest {
	return &AccessReviewInstanceDecisionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewInstanceDecisionItem item
func (b *AccessReviewInstanceDecisionsCollectionRequestBuilder) ID(id string) *AccessReviewInstanceDecisionItemRequestBuilder {
	bb := &AccessReviewInstanceDecisionItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewInstanceDecisionsCollectionRequest is request for AccessReviewInstanceDecisionItem collection
type AccessReviewInstanceDecisionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewInstanceDecisionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewInstanceDecisionItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewInstanceDecisionItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewInstanceDecisionItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewInstanceDecisionItem collection, max N pages
func (r *AccessReviewInstanceDecisionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewInstanceDecisionItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewInstanceDecisionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewInstanceDecisionItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewInstanceDecisionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewInstanceDecisionItem) (resObj *AccessReviewInstanceDecisionItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Instances returns request builder for AccessReviewInstance collection
func (b *AccessReviewScheduleDefinitionRequestBuilder) Instances() *AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder {
	bb := &AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/instances"
	return bb
}

// AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder is request builder for AccessReviewInstance collection
type AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewInstance collection
func (b *AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder) Request() *AccessReviewScheduleDefinitionInstancesCollectionRequest {
	return &AccessReviewScheduleDefinitionInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewInstance item
func (b *AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder) ID(id string) *AccessReviewInstanceRequestBuilder {
	bb := &AccessReviewInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewScheduleDefinitionInstancesCollectionRequest is request for AccessReviewInstance collection
type AccessReviewScheduleDefinitionInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewInstance collection
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewInstance collection, max N pages
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewInstance collection
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) Get(ctx context.Context) ([]AccessReviewInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewInstance collection
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewInstance) (resObj *AccessReviewInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Definitions returns request builder for AccessReviewScheduleDefinition collection
func (b *AccessReviewSetRequestBuilder) Definitions() *AccessReviewSetDefinitionsCollectionRequestBuilder {
	bb := &AccessReviewSetDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/definitions"
	return bb
}

// AccessReviewSetDefinitionsCollectionRequestBuilder is request builder for AccessReviewScheduleDefinition collection
type AccessReviewSetDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewScheduleDefinition collection
func (b *AccessReviewSetDefinitionsCollectionRequestBuilder) Request() *AccessReviewSetDefinitionsCollectionRequest {
	return &AccessReviewSetDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewScheduleDefinition item
func (b *AccessReviewSetDefinitionsCollectionRequestBuilder) ID(id string) *AccessReviewScheduleDefinitionRequestBuilder {
	bb := &AccessReviewScheduleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewSetDefinitionsCollectionRequest is request for AccessReviewScheduleDefinition collection
type AccessReviewSetDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewScheduleDefinition collection
func (r *AccessReviewSetDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewScheduleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewScheduleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewScheduleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewScheduleDefinition collection, max N pages
func (r *AccessReviewSetDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewScheduleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewScheduleDefinition collection
func (r *AccessReviewSetDefinitionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewScheduleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewScheduleDefinition collection
func (r *AccessReviewSetDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewScheduleDefinition) (resObj *AccessReviewScheduleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/nais/msgraph.go/jsonx"
)

// Lists returns request builder for TodoTaskList collection
func (b *TodoRequestBuilder) Lists() *TodoListsCollectionRequestBuilder {
	bb := &TodoListsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lists"
	return bb
}

// TodoListsCollectionRequestBuilder is request builder for TodoTaskList collection
type TodoListsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TodoTaskList collection
func (b *TodoListsCollectionRequestBuilder) Request() *TodoListsCollectionRequest {
	return &TodoListsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TodoTaskList item
func (b *TodoListsCollectionRequestBuilder) ID(id string) *TodoTaskListRequestBuilder {
	bb := &TodoTaskListRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// TodoListsCollectionRequest is request for TodoTaskList collection
type TodoListsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TodoTaskList collection
func (r *TodoListsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TodoTaskList, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TodoTaskList
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TodoTaskList
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TodoTaskList collection, max N pages
func (r *TodoListsCollectionRequest) GetN(ctx context.Context, n int) ([]TodoTaskList, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TodoTaskList collection
func (r *TodoListsCollectionRequest) Get(ctx context.Context) ([]TodoTaskList, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TodoTaskList collection
func (r *TodoListsCollectionRequest) Add(ctx context.Context, reqObj *TodoTaskList) (resObj *TodoTaskList, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Extensions returns request builder for Extension collection
func (b *TodoTaskRequestBuilder) Extensions() *TodoTaskExtensionsCollectionRequestBuilder {
	bb := &TodoTaskExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/extensions"
	return bb
}

// TodoTaskExtensionsCollectionRequestBuilder is request builder for Extension collection
type TodoTaskExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Extension collection
func (b *TodoTaskExtensionsCollectionRequestBuilder) Request() *TodoTaskExtensionsCollectionRequest {
	return &TodoTaskExtensionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Extension item
func (b *TodoTaskExtensionsCollectionRequestBuilder) ID(id string) *ExtensionRequestBuilder {
	bb := &ExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// TodoTaskExtensionsCollectionRequest is request for Extension collection
type TodoTaskExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Extension collection
func (r *TodoTaskExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Extension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Extension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Extension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Extension collection, max N pages
func (r *TodoTaskExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]Extension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Extension collection
func (r *TodoTaskExtensionsCollectionRequest) Get(ctx context.Context) ([]Extension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Extension collection
func (r *TodoTaskExtensionsCollectionRequest) Add(ctx context.Context, reqObj *Extension) (resObj *Extension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LinkedResources returns request builder for LinkedResource collection
func (b *TodoTaskRequestBuilder) LinkedResources() *TodoTaskLinkedResourcesCollectionRequestBuilder {
	bb := &TodoTaskLinkedResourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/linkedResources"
	return bb
}

// TodoTaskLinkedResourcesCollectionRequestBuilder is request builder for LinkedResource collection
type TodoTaskLinkedResourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for LinkedResource collection
func (b *TodoTaskLinkedResourcesCollectionRequestBuilder) Request() *TodoTaskLinkedResourcesCollectionRequest {
	return &TodoTaskLinkedResourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for LinkedResource item
func (b *TodoTaskLinkedResourcesCollectionRequestBuilder) ID(id string) *LinkedResourceRequestBuilder {
	bb := &LinkedResourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// TodoTaskLinkedResourcesCollectionRequest is request for LinkedResource collection
type TodoTaskLinkedResourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for LinkedResource collection
func (r *TodoTaskLinkedResourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]LinkedResource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []LinkedResource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []LinkedResource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for LinkedResource collection, max N pages
func (r *TodoTaskLinkedResourcesCollectionRequest) GetN(ctx context.Context, n int) ([]LinkedResource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for LinkedResource collection
func (r *TodoTaskLinkedResourcesCollectionRequest) Get(ctx context.Context) ([]LinkedResource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for LinkedResource collection
func (r *TodoTaskLinkedResourcesCollectionRequest) Add(ctx context.Context, reqObj *LinkedResource) (resObj *LinkedResource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Extensions returns request builder for Extension collection
func (b *TodoTaskListRequestBuilder) Extensions() *TodoTaskListExtensionsCollectionRequestBuilder {
	bb := &TodoTaskListExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/extensions"
	return bb
}

// TodoTaskListExtensionsCollectionRequestBuilder is request builder for Extension collection
type TodoTaskListExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Extension collection
func (b *TodoTaskListExtensionsCollectionRequestBuilder) Request() *TodoTaskListExtensionsCollectionRequest {
	return &TodoTaskListExtensionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Extension item
func (b *TodoTaskListExtensionsCollectionRequestBuilder) ID(id string) *ExtensionRequestBuilder {
	bb := &ExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// TodoTaskListExtensionsCollectionRequest is request for Extension collection
type TodoTaskListExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Extension collection
func (r *TodoTaskListExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Extension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Extension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Extension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Extension collection, max N pages
func (r *TodoTaskListExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]Extension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Extension collection
func (r *TodoTaskListExtensionsCollectionRequest) Get(ctx context.Context) ([]Extension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Extension collection
func (r *TodoTaskListExtensionsCollectionRequest) Add(ctx context.Context, reqObj *Extension) (resObj *Extension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tasks returns request builder for TodoTask collection
func (b *TodoTaskListRequestBuilder) Tasks() *TodoTaskListTasksCollectionRequestBuilder {
	bb := &TodoTaskListTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// TodoTaskListTasksCollectionRequestBuilder is request builder for TodoTask collection
type TodoTaskListTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TodoTask collection
func (b *TodoTaskListTasksCollectionRequestBuilder) Request() *TodoTaskListTasksCollectionRequest {
	return &TodoTaskListTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TodoTask item
func (b *TodoTaskListTasksCollectionRequestBuilder) ID(id string) *TodoTaskRequestBuilder {
	bb := &TodoTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// TodoTaskListTasksCollectionRequest is request for TodoTask collection
type TodoTaskListTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TodoTask collection
func (r *TodoTaskListTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TodoTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TodoTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TodoTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TodoTask collection, max N pages
func (r *TodoTaskListTasksCollectionRequest) GetN(ctx context.Context, n int) ([]TodoTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TodoTask collection
func (r *TodoTaskListTasksCollectionRequest) Get(ctx context.Context) ([]TodoTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TodoTask collection
func (r *TodoTaskListTasksCollectionRequest) Add(ctx context.Context, reqObj *TodoTask) (resObj *TodoTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

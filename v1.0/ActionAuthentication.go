// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/nais/msgraph.go/jsonx"
)

// Fido2Methods returns request builder for Fido2AuthenticationMethod collection
func (b *AuthenticationRequestBuilder) Fido2Methods() *AuthenticationFido2MethodsCollectionRequestBuilder {
	bb := &AuthenticationFido2MethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/fido2Methods"
	return bb
}

// AuthenticationFido2MethodsCollectionRequestBuilder is request builder for Fido2AuthenticationMethod collection
type AuthenticationFido2MethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Fido2AuthenticationMethod collection
func (b *AuthenticationFido2MethodsCollectionRequestBuilder) Request() *AuthenticationFido2MethodsCollectionRequest {
	return &AuthenticationFido2MethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Fido2AuthenticationMethod item
func (b *AuthenticationFido2MethodsCollectionRequestBuilder) ID(id string) *Fido2AuthenticationMethodRequestBuilder {
	bb := &Fido2AuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationFido2MethodsCollectionRequest is request for Fido2AuthenticationMethod collection
type AuthenticationFido2MethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Fido2AuthenticationMethod collection
func (r *AuthenticationFido2MethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Fido2AuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Fido2AuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Fido2AuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Fido2AuthenticationMethod collection, max N pages
func (r *AuthenticationFido2MethodsCollectionRequest) GetN(ctx context.Context, n int) ([]Fido2AuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Fido2AuthenticationMethod collection
func (r *AuthenticationFido2MethodsCollectionRequest) Get(ctx context.Context) ([]Fido2AuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Fido2AuthenticationMethod collection
func (r *AuthenticationFido2MethodsCollectionRequest) Add(ctx context.Context, reqObj *Fido2AuthenticationMethod) (resObj *Fido2AuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Methods returns request builder for AuthenticationMethod collection
func (b *AuthenticationRequestBuilder) Methods() *AuthenticationMethodsCollectionRequestBuilder {
	bb := &AuthenticationMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/methods"
	return bb
}

// AuthenticationMethodsCollectionRequestBuilder is request builder for AuthenticationMethod collection
type AuthenticationMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationMethod collection
func (b *AuthenticationMethodsCollectionRequestBuilder) Request() *AuthenticationMethodsCollectionRequest {
	return &AuthenticationMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationMethod item
func (b *AuthenticationMethodsCollectionRequestBuilder) ID(id string) *AuthenticationMethodRequestBuilder {
	bb := &AuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsCollectionRequest is request for AuthenticationMethod collection
type AuthenticationMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationMethod collection
func (r *AuthenticationMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationMethod collection, max N pages
func (r *AuthenticationMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationMethod collection
func (r *AuthenticationMethodsCollectionRequest) Get(ctx context.Context) ([]AuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationMethod collection
func (r *AuthenticationMethodsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationMethod) (resObj *AuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftAuthenticatorMethods returns request builder for MicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) MicrosoftAuthenticatorMethods() *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder {
	bb := &AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftAuthenticatorMethods"
	return bb
}

// AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethod collection
type AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder) Request() *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest {
	return &AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethod item
func (b *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethod collection
type AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethod collection, max N pages
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethod) (resObj *MicrosoftAuthenticatorAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsHelloForBusinessMethods returns request builder for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) WindowsHelloForBusinessMethods() *AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder {
	bb := &AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsHelloForBusinessMethods"
	return bb
}

// AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder is request builder for WindowsHelloForBusinessAuthenticationMethod collection
type AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder) Request() *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest {
	return &AuthenticationWindowsHelloForBusinessMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsHelloForBusinessAuthenticationMethod item
func (b *AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder) ID(id string) *WindowsHelloForBusinessAuthenticationMethodRequestBuilder {
	bb := &WindowsHelloForBusinessAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationWindowsHelloForBusinessMethodsCollectionRequest is request for WindowsHelloForBusinessAuthenticationMethod collection
type AuthenticationWindowsHelloForBusinessMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsHelloForBusinessAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsHelloForBusinessAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsHelloForBusinessAuthenticationMethod collection, max N pages
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) Get(ctx context.Context) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) Add(ctx context.Context, reqObj *WindowsHelloForBusinessAuthenticationMethod) (resObj *WindowsHelloForBusinessAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthenticationMethodConfigurations returns request builder for AuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyRequestBuilder) AuthenticationMethodConfigurations() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder {
	bb := &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationMethodConfigurations"
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder is request builder for AuthenticationMethodConfiguration collection
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder) Request() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest {
	return &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationMethodConfiguration item
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder) ID(id string) *AuthenticationMethodConfigurationRequestBuilder {
	bb := &AuthenticationMethodConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest is request for AuthenticationMethodConfiguration collection
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationMethodConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationMethodConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationMethodConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationMethodConfiguration collection, max N pages
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationMethodConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) Get(ctx context.Context) ([]AuthenticationMethodConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationMethodConfiguration) (resObj *AuthenticationMethodConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
